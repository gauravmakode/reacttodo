{"version":3,"sources":["home.js","todo.js","actions/action.js","App.js","serviceWorker.js","reducers/reducer.js","index.js","localstorage.js"],"names":["Home","props","renderTodo","todo_list","map","item","state","todoList","this","Component","connect","todo","Todo","handleChange","e","setState","newTodo","target","value","addTodo","newList","change_todo","to","placeholder","onChange","autoFocus","onClick","dispatch","type","payload","changeTodo","App","exact","path","component","Boolean","window","location","hostname","match","initialState","reducer","action","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAGMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,WAAa,WAEX,OADa,EAAKD,MAAME,UACZC,KAAI,SAACC,GAAD,OAAU,4BAAKA,OAP/B,EAAKC,MAAQ,CACXC,SAAU,IAHK,E,qDAajB,OACE,6BACE,4CACCC,KAAKN,kB,GAjBKO,aA4BJC,eALH,SAACJ,GACX,MAAO,CACLH,UAAWG,EAAMK,QAGND,CAAaV,G,gBC1BtBY,E,kDACJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAMRY,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,QAASF,EAAEG,OAAOC,SATH,EAanBhB,WAAa,WAEX,OADa,EAAKD,MAAME,UACZC,KAAI,SAACC,GAAD,OAAU,4BAAKA,OAfd,EAkBnBc,QAAU,WACR,IAAMC,EAAO,sBAAO,EAAKnB,MAAME,WAAlB,CAA6B,EAAKG,MAAMU,UACrD,EAAKf,MAAMoB,YAAYD,GACvB,EAAKL,SAAS,CACZC,QAAS,MApBX,EAAKV,MAAQ,CACXU,QAAS,IAHM,E,qDA0BT,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,CAAMM,GAAG,SAAT,QACA,2BACEC,YAAY,aACZL,MAAOV,KAAKF,MAAMU,QAClBQ,SAAUhB,KAAKK,eAEjB,4BAAQY,WAAS,EAACC,QAAS,kBAAM,EAAKP,YAAtC,YAGCX,KAAKN,kB,GAvCKO,aA2DJC,eAdC,SAACJ,GACf,MAAO,CACLH,UAAWG,EAAMK,SAIJ,SAACgB,GAChB,MAAO,CACLN,YAAa,SAACV,GACZgB,EC3DoB,SAAChB,GACzB,MAAO,CACLiB,KAAM,cACNC,QAASlB,GDwDEmB,CAAWnB,QAKXD,CAA2BE,G,OE3DrBmB,E,uKAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IAEjC,kBAAC,IAAD,CAAOqB,KAAK,QAAQC,UAAWlC,U,GAPRS,aCOb0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBClBAC,EAAe,CACnB7B,KAAM,IAYO8B,EATC,WAAmC,IAAlCnC,EAAiC,uDAAzBkC,EAAcE,EAAW,uCAChD,OAAQA,EAAOd,MACb,IAAK,cACH,OAAO,2BAAKtB,GAAZ,IAAmBK,KAAM+B,EAAOb,UAClC,QACE,OAAOvB,I,iBCEPqC,ECXmB,WACvB,IACE,IAAMC,EAAkBC,aAAaC,QAAQ,SAC7C,GAAwB,OAApBF,EACF,OAEF,OAAOG,KAAKC,MAAMJ,GAClB,MAAOK,GACP,QDGmBC,GACjBC,EAAQC,YAAYX,EAAQE,GAElCQ,EAAME,UACJC,KAAS,YCHc,SAAChD,GACxB,IACE,IAAMsC,EAAkBG,KAAKQ,UAAUjD,GACvCuC,aAAaW,QAAQ,QAASZ,GAC9B,MAAOK,KDAPQ,CAAUN,EAAMO,cACf,MAGLC,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SFyGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05bb94de.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n    };\n  }\n\n  renderTodo = () => {\n    const list = this.props.todo_list;\n    return list.map((item) => <h2>{item}</h2>);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Your Todosss</h1>\n        {this.renderTodo()}\n      </div>\n    );\n  }\n}\n\nconst get = (state) => {\n  return {\n    todo_list: state.todo,\n  };\n};\nexport default connect(get)(Home);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { changeTodo } from \"./actions/action\";\nimport { Link } from \"react-router-dom\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTodo: \"\",\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      newTodo: e.target.value,\n    });\n  };\n\n  renderTodo = () => {\n    const list = this.props.todo_list;\n    return list.map((item) => <h2>{item}</h2>);\n  };\n\n  addTodo = () => {\n    const newList = [...this.props.todo_list, this.state.newTodo];\n    this.props.change_todo(newList);\n    this.setState({\n      newTodo: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Link to=\"/home\">Home</Link>\n        <input\n          placeholder=\"enter todo\"\n          value={this.state.newTodo}\n          onChange={this.handleChange}\n        ></input>\n        <button autoFocus onClick={() => this.addTodo()}>\n          Add todo\n        </button>\n        {this.renderTodo()}\n      </div>\n    );\n  }\n}\n\nconst getdata = (state) => {\n  return {\n    todo_list: state.todo,\n  };\n};\n\nconst postdata = (dispatch) => {\n  return {\n    change_todo: (todo) => {\n      dispatch(changeTodo(todo));\n    },\n  };\n};\n\nexport default connect(getdata, postdata)(Todo);\n","export const changeTodo = (todo) => {\n  return {\n    type: \"CHANGE_TODO\",\n    payload: todo,\n  };\n};\n","import React, { Component } from \"react\";\nimport Home from \"./home\";\nimport Todo from \"./todo\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Todo} />\n\n          <Route path=\"/home\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  todo: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHANGE_TODO\":\n      return { ...state, todo: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers/reducer\";\nimport { loadState, saveState } from \"./localstorage\";\nimport throttle from \"lodash/throttle\";\n\nconst persistedState = loadState();\nconst store = createStore(reducer,persistedState);\n\nstore.subscribe(\n  throttle(() => {\n    saveState(store.getState());\n  }, 1000)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (err) {\n  }\n};\n"],"sourceRoot":""}